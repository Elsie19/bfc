#!/bin/bash

function array.contains() {
    local check
    local -n arra="${1:?No array passed to array.contains}"
    local input="${2:?No input given to array.contains}"
    for check in "${arra[@]}"; do
        if [[ ${check} == "${input}" ]]; then
            return 0
        fi
    done
    return 1
}

cell_size=30000
while getopts 'o:s:' OPTION; do
    case "${OPTION}" in
        o) flags_string="${OPTARG}" custom_flags=true ;;
        s) flags_string="${OPTARG}" custom_flags=false ;;
        # Current optimization flags are contract,clear,stack_size
        *) echo "Usage: ${0##*/} [-o optimization,flags] input output" >&2 && exit 1 ;;
    esac
done
shift $((OPTIND - 1))
if [[ -n $flags_string && $custom_flags == true ]]; then
    IFS=',' read -ra flags <<< "${flags_string}"
elif [[ $custom_flags == false ]]; then
    case "${flags_string}" in
        'size' | 's') flags=(contract clear) flags_string="contract,clear" ;;
        'speed' | 3) flags=(contract clear stack_size) flags_string="contract,clear,stack_size" ;;
        *) unset flags_string ;;
    esac
fi

file="${1?No file passed}"
if ! [[ -f ${file} ]]; then
    echo "${0##*/}: ${file} No such file or directory" >&2
fi
out_file="${2?No output file passed}"

echo "- Generating outfile"

{
    echo "#!/bin/bash"
    echo "# Generated by '${0##*/}' on $(date)"
    echo -e "# Optimization flags: ${flags_string-None}\n"
    # echo 'LC_ALL=C'
    echo "cells=({0..${cell_size}})"
    echo 'for i in "${cells[@]}"; do'
    echo 'cells[i]=0'
    echo 'done'
    echo 'declare -i ptr=0'
} > "${out_file}"

echo "- Creating IR representation"

# IR representation
while IFS= read -r -n1 char; do
    case "${char}" in
        '>') echo 'Add' ;;
        '<') echo 'Sub' ;;
        '+') echo 'Right' ;;
        '-') echo 'Left' ;;
        '.') echo 'Out' ;;
        ',') echo 'In' ;;
        '[') echo 'Open' ;;
        ']') echo 'Close' ;;
        *) : ;; # They're comments
    esac
done < "${file}" > "${out_file}.bir"

echo "- Running optimizations"

if array.contains flags "clear"; then
    clear_opt=$(< "${out_file}.bir")
    clear_opt="${clear_opt//Open$'\n'Right$'\n'Close/Clear}"
    clear_opt="${clear_opt//Open$'\n'Left$'\n'Close/Clear}"
    echo "${clear_opt}" > "${out_file}.bir"
fi

# Apply optimizations. We're gonna use uniq to get the count of contiguous duplicate lines hehe.
# Finally! A use for uniq!
prog_ir=()
mapfile -t prog_ir < <(uniq -c "${out_file}.bir" | awk '{print $2,$1}')

echo "- Writing to outfile"

for line in "${prog_ir[@]}"; do
    case "${line}" in
        'Add'*)
            if array.contains flags "contract"; then
                echo "((ptr+=${line##* }))"
            else
                for ((i = 1; i <= "${line##* }"; i++)); do
                    echo '((ptr++))'
                done
            fi
            ;;
        'Sub'*)
            if array.contains flags "contract"; then
                echo "((ptr-=${line##* }))"
            else
                for ((i = 1; i <= "${line##* }"; i++)); do
                    echo '((ptr--))'
                done
            fi
            ;;
        'Right'*)
            if array.contains flags "contract"; then
                echo "((cells[ptr]+=${line##* }))"
                echo '((cells[ptr] > 255)) && cells[ptr]=$((cells[ptr] - 255))'
            else
                for ((i = 1; i <= "${line##* }"; i++)); do
                    echo '((cells[ptr]++))'
                    echo '((cells[ptr] > 255)) && cells[ptr]=0'
                done
            fi
            ;;
        'Left'*)
            if array.contains flags "contract"; then
                echo "((cells[ptr]-=${line##* }))"
                echo '((cells[ptr] < 0)) && cells[ptr]=$((255 + cells[ptr]))'
            else
                for ((i = 1; i <= "${line##* }"; i++)); do
                    echo '((cells[ptr]--))'
                    echo '((cells[ptr] < 0)) && cells[ptr]=255'
                done
            fi
            ;;
        'Out'*)
            for ((i = 1; i <= "${line##* }"; i++)); do
                echo 'printf -v hex "%x" "${cells[$ptr]}"'
                echo 'printf %b "\x$hex"'
            done
            ;;
        'In'*) for ((i = 1; i <= "${line##* }"; i++)); do
            echo 'read -r -n1 input'
            echo '[[ -n $input ]] && cells[ptr]=${input}'
        done ;;
        'Open'*) for ((i = 1; i <= "${line##* }"; i++)); do
            echo 'while ((cells[ptr])); do'
        done ;;
        'Close'*) for ((i = 1; i <= "${line##* }"; i++)); do
            echo 'done'
        done ;;
        'Clear'*) for ((i = 1; i <= "${line##* }"; i++)); do
            echo 'cells[ptr]=0'
        done ;;
        *) : ;; # They're comments
    esac
done >> "${out_file}"
rm "${out_file}.bir"
chmod +x "${out_file}"
